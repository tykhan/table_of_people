{"version":3,"sources":["_variables/constants.js","redux/reducers/usersReducer.js","redux/reducers/postCommentsReducer.js","redux/reducers/postsReducer.js","redux/reducers/postDetailsReducer.js","redux/reducers/rootReducer.js","redux/reducers/loadingReducer.js","redux/store.js","api/api.js","redux/actions/loadingActions.js","redux/actions/postsActions.js","redux/actions/usersActions.js","components/Loader/Loader.jsx","components/UserPosts/UserPost.jsx","components/PostsList/PostsList.jsx","redux/actions/postDetailsaction.js","components/PostDetails/PostDetails.jsx","components/User/User.jsx","components/UsersList/UsersList.jsx","App.js","index.js"],"names":["START_SPINNER","STOP_SPINNER","LOAD_USERS_SUCCESS","LOAD_USERS_ERROR","LOAD_POSTS_SUCCESS","LOAD_POSTS_ERROR","LOAD_POST_COMMENTS_SUCCESS","LOAD_POST_COMMENTS_ERROR","LOAD_POST_DETAILS_SUCCESS","LOAD_POST_DETAILS_ERROR","initialState","users","error","comments","posts","post","rootReducer","combineReducers","state","action","type","payload","postDetails","postComments","loading","selectors","store","createStore","applyMiddleware","thunk","subscribe","request","endpoint","options","fetch","then","response","ok","Error","status","statusText","json","getUserPosts","userId","getPostDetails","postId","editPost","data","url","method","headers","body","JSON","stringify","putMethod","deletePost","startLoading","stopLoading","postsLoadSuccess","loadPostsThunk","dispatch","a","loadingActions","api","usersLoadSuccess","loadUsersThunk","Loader","className","UserPost","author","find","user","id","title","name","to","PostsList","match","useDispatch","useSelector","useState","selectedUser","setSelectedUser","useEffect","value","onChange","e","target","map","postCommentsLoadSuccess","postLoadSuccess","PostDetails","isLoading","newTitle","setNewTitle","newText","setNewText","params","postAuthor","commentId","loadPostThunk","comment","onSubmit","preventDefault","newPostValues","window","alert","placeholder","required","trimLeft","rows","onClick","User","username","email","Users","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ae57c6a.chunk.js","sourcesContent":["// Loading constants\nexport const START_SPINNER = 'START_SPINNER';\nexport const STOP_SPINNER = 'STOP_SPINNER';\n\n// Users constants\nexport const LOAD_USERS_SUCCESS = 'LOAD_USERS_SUCCESS';\nexport const LOAD_USERS_ERROR = 'LOAD_USERS_ERROR';\n\n// Posts constants\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_ERROR = 'LOAD_POSTS_ERROR';\n\n// Post comments constants\nexport const LOAD_POST_COMMENTS_SUCCESS = 'LOAD_POST_COMMENTS_SUCCESS';\nexport const LOAD_POST_COMMENTS_ERROR = 'LOAD_POST_COMMENTS_ERROR';\n\n// Post comments constants\nexport const LOAD_POST_DETAILS_SUCCESS = 'LOAD_POST_DETAILS_SUCCESS';\nexport const LOAD_POST_DETAILS_ERROR = 'LOAD_POST_DETAILS_ERROR';\n","import { LOAD_USERS_SUCCESS, LOAD_USERS_ERROR } from '../../_variables/constants';\n\nconst initialState = {\n  users: [],\n  error: null,\n}\n\nexport const usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload\n      };\n    case LOAD_USERS_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { LOAD_POST_COMMENTS_ERROR, LOAD_POST_COMMENTS_SUCCESS} from '../../_variables/constants';\n\nconst initialState = {\n  error: null,\n  comments: []\n}\n\nexport const postCommentsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_POST_COMMENTS_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case LOAD_POST_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { LOAD_POSTS_SUCCESS, LOAD_POSTS_ERROR } from '../../_variables/constants';\n\nconst initialState = {\n  posts: [],\n  error: null,\n}\n\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_POSTS_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case LOAD_POSTS_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { LOAD_POST_DETAILS_ERROR, LOAD_POST_DETAILS_SUCCESS } from '../../_variables/constants';\n\nconst initialState = {\n  post: {},\n  error: null,\n}\n\nexport const postDetailsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_POST_DETAILS_SUCCESS:\n      return {\n        ...state,\n        post: action.payload,\n      };\n    case LOAD_POST_DETAILS_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { loadingReducer } from './loadingReducer';\nimport { usersReducer } from './usersReducer';\nimport { postCommentsReducer } from './postCommentsReducer';\nimport { postsReducer } from './postsReducer';\nimport { postDetailsReducer } from './postDetailsReducer';\n\nexport const rootReducer = combineReducers({\n  users: usersReducer,\n  posts: postsReducer,\n  postDetails: postDetailsReducer,\n  postComments: postCommentsReducer,\n  loading: loadingReducer,\n});\n\nexport const selectors = {\n  getLoading: state => state.loading,\n  getUsers: state => state.users.users,\n  getPosts: state => state.posts.posts,\n  getPostComments: state => state.postComments.comments,\n  getPostDetails: state => state.postDetails.post,\n}\n","import { START_SPINNER, STOP_SPINNER } from '../../_variables/constants';\n\nexport const loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_SPINNER:\n      return true;\n    case STOP_SPINNER:\n      return false;\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { rootReducer } from './reducers/rootReducer';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nstore.subscribe(() => {\n  // console.log(store.getState());\n})","const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nconst request = (endpoint, options) => {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nconst postMethod = (url, data) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data)\n  });\n}\n\nconst deleteMethod = (url) => {\n  return request(url, { method: 'DELETE' });\n}\n\nconst putMethod = (url, data) => {\n  return request(url, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data)\n  });\n}\n\nexport const getUsers = () => request('/users');\nexport const getUserPosts = (userId) => request(`/posts?userId=${userId}`);\nexport const getPosts = () => request('/posts');\nexport const getPostDetails = (postId) => request(`/posts/${postId}`);\nexport const getPostComments = (postId) => request(`/comments?postId=${postId}`);\nexport const editPost = (postId, data) => putMethod(`/posts/${postId}`, data);\nexport const addNewPost = (data) => postMethod('/posts', data);\nexport const deletePost = (postId) => deleteMethod(`/posts/${postId}`);\n","import { START_SPINNER, STOP_SPINNER } from '../../_variables/constants'\n\nexport const startLoading = () => ({ type: START_SPINNER });\nexport const stopLoading = () => ({ type: STOP_SPINNER });\n","import { LOAD_POSTS_SUCCESS, LOAD_POSTS_ERROR } from '../../_variables/constants';\nimport * as api from '../../api/api';\nimport * as loadingActions from './loadingActions';\n\nexport const postsLoadError = (error) => ({\n  type: LOAD_POSTS_ERROR,\n  payload: error,\n});\n\nexport const postsLoadSuccess = (users) => ({\n  type: LOAD_POSTS_SUCCESS,\n  payload: users,\n})\n\nexport const loadPostsThunk = (userId) => async (dispatch) => {\n  dispatch(loadingActions.startLoading());\n  try {\n    if (userId === '0') {\n      const posts = await api.getPosts();\n      dispatch(postsLoadSuccess(posts));\n    } else {\n      const posts = await api.getUserPosts(userId);\n      dispatch(postsLoadSuccess(posts))\n    }\n  } catch (error) {\n    dispatch(postsLoadError(error));\n  }\n  dispatch(loadingActions.stopLoading());\n}\n","import { LOAD_USERS_ERROR, LOAD_USERS_SUCCESS } from '../../_variables/constants';\nimport * as api from '../../api/api';\nimport * as loadingActions from './loadingActions';\n\n\nexport const usersLoadError = (error) => ({\n  type: LOAD_USERS_ERROR,\n  payload: error,\n});\n\nexport const usersLoadSuccess = (users) => ({\n  type: LOAD_USERS_SUCCESS,\n  payload: users,\n})\n\nexport const loadUsersThunk = () => async (dispatch) => {\n  dispatch(loadingActions.startLoading());\n  try {\n    const users = await api.getUsers();\n    dispatch(usersLoadSuccess(users));\n  } catch (error) {\n    dispatch(usersLoadError(error));\n  }\n  dispatch(loadingActions.stopLoading());\n}\n","import './Loader.scss'\n\nexport const Loader = () => <div className=\"loader\"></div>;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './UserPosts.scss';\n\nexport const UserPost = ({ post, users }) => {\n  const author = users.find(user => user.id === post.userId);\n\n  return (\n    <>\n      <li className=\"posts__list_item post-list\">\n        <div className=\"post-list__item\">\n          <div className=\"post-list__title\">{post.title}</div>\n          {author && <div className=\"post-list__author\">Author: {author.name}</div>}\n        </div>\n        <Link to={`/posts/${post.id}`} className=\"post-list__details-btn\">Details</Link>\n      </li>\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { loadPostsThunk } from '../../redux/actions/postsActions';\nimport { loadUsersThunk } from '../../redux/actions/usersActions';\nimport { selectors } from '../../redux/reducers/rootReducer';\nimport { Loader } from '../Loader/Loader';\nimport { UserPost } from '../UserPosts/UserPost';\nimport './PostsList.scss';\n\nexport const PostsList = ({ match }) => {\n  const dispatch = useDispatch();\n  const users = useSelector(selectors.getUsers);\n  const posts = useSelector(selectors.getPosts)\n  const loading = useSelector(selectors.getLoading);\n  const [selectedUser, setSelectedUser] = useState('0');\n\n  useEffect(() => {\n    dispatch(loadPostsThunk('0'));\n    dispatch(loadUsersThunk());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(loadPostsThunk(selectedUser))\n  }, [selectedUser, dispatch]);\n\n  return (\n    <section className=\"posts\">\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <div className=\"posts__top\">\n            <Link to=\"/\" className=\"posts__back-btn\">Go back</Link>\n            <label className=\"posts__user-selector-label\">\n                Select a user: &nbsp;\n              <select\n                className=\"posts__user-selector\"\n                value={selectedUser}\n                onChange={(e) => {\n                  setSelectedUser(e.target.value);\n                }}\n              >\n                <option value={0}>All users</option>\n                {users.map(user =>\n                  <option key={user.id} value={user.id}>{user.name}</option>\n                )}\n              </select>\n            </label>\n          </div>\n          <ul className=\"posts__list\">\n            {posts.map(post =>\n              <UserPost post={post} users={users} key={post.id}/>\n            )}\n          </ul>\n        </>\n      )}\n    </section>\n  )\n}","import {\n  LOAD_POST_COMMENTS_ERROR,\n  LOAD_POST_COMMENTS_SUCCESS,\n  LOAD_POST_DETAILS_ERROR,\n  LOAD_POST_DETAILS_SUCCESS\n} from '../../_variables/constants';\nimport * as api from '../../api/api';\nimport * as loadingActions from './loadingActions';\n\nexport const postCommentsLoadError = (error) => ({\n  type: LOAD_POST_COMMENTS_ERROR,\n  payload: error,\n});\n\nexport const postCommentsLoadSuccess = (comments) => ({\n  type: LOAD_POST_COMMENTS_SUCCESS,\n  payload: comments,\n});\n\nexport const postLoadError = (error) => ({\n  type: LOAD_POST_DETAILS_ERROR,\n  payload: error,\n});\n\nexport const postLoadSuccess = (post) => ({\n  type: LOAD_POST_DETAILS_SUCCESS,\n  payload: post,\n});\n\nexport const loadPostCommentsThunk = (commentId) => async (dispatch) => {\n  dispatch(loadingActions.startLoading());\n  try {\n    const comments = await api.getPostComments(commentId);\n    dispatch(postCommentsLoadSuccess(comments));\n  } catch (error) {\n    dispatch(postCommentsLoadError(error));\n  }\n  dispatch(loadingActions.stopLoading());\n}\n\nexport const loadPostThunk = (postId) => async (dispatch) => {\n  dispatch(loadingActions.startLoading());\n  try {\n    const post = await api.getPostDetails(postId);\n    dispatch(postLoadSuccess(post))\n  } catch (error) {\n    dispatch(postLoadError(error));\n  }\n  dispatch(loadingActions.stopLoading());\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { loadPostCommentsThunk, loadPostThunk } from '../../redux/actions/postDetailsaction';\nimport { loadUsersThunk } from '../../redux/actions/usersActions';\nimport { selectors } from '../../redux/reducers/rootReducer';\nimport { Loader } from '../Loader/Loader';\nimport * as api from '../../api/api';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ match }) => {\n  const dispatch = useDispatch();\n  const comments = useSelector(selectors.getPostComments);\n  const post = useSelector(selectors.getPostDetails);\n  const isLoading = useSelector(selectors.getLoading);\n  const users = useSelector(selectors.getUsers);\n  const [newTitle, setNewTitle] = useState('');\n  const [newText, setNewText] = useState('');\n\n  const postId = +match.params.postId;\n  const postAuthor = users.find(user => +user.id === +post.userId);\n\n  useEffect(() => {\n    dispatch(loadPostCommentsThunk(postId));\n    dispatch(loadPostThunk(postId));\n    dispatch(loadUsersThunk());\n  }, [dispatch, postId]);\n\n  const deleteHandler = (id) => {\n    api.deletePost(id);\n    window.alert('Post was succesfully deleted')\n  }\n\n  const saveChangesHandler = (e) => {\n    e.preventDefault();\n\n    const newPostValues = {\n      title: newTitle,\n      body: newText,\n      userId: post.userId\n    }\n    api.editPost(postId, newPostValues).then(post => {\n      window.alert(`Post succesfully changed\n        Title: ${post.title}\n        Text: ${post.body}\n      `)\n    });\n\n    setNewText('');\n    setNewTitle('');\n  }\n  \n  return (\n    <section className=\"details-section\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <Link to=\"/posts\" className=\"details-section__back-btn\">Go back</Link>\n          <div className=\"details-section__post post\">\n            <div className=\"post__title\">{post.title}</div>\n            <div className=\"post__body\">{post.body}</div>\n            {postAuthor && <div className=\"post__author\">Author: {postAuthor.name}</div>}\n            <ul className=\"post__comments-list\">\n              <span className=\"post__comments\">Comments: </span>\n              {comments.map(comment => {\n                return (\n                  <li key={comment.id} className=\"post__comments__comment comment\">\n                    <div className=\"comment__name\">{comment.name}</div>\n                    <div className=\"comment__body\">{comment.body}</div>\n                  </li>)\n              })}\n            </ul>\n            <div className=\"post__bottom\">\n              <form\n                action=\"post\"\n                className=\"post__edit-form\"\n                onSubmit={saveChangesHandler}\n              >\n                <div className=\"post-edit\">Edit post</div>\n                <input\n                  placeholder=\"Enter new title...\"\n                  value={newTitle}\n                  type=\"text\"\n                  className=\"post__edit__title\"\n                  required\n                  onChange={(e) => setNewTitle(e.target.value.trimLeft())}\n                />\n                <textarea\n                  placeholder=\"Enter new text...\"\n                  value={newText}\n                  type=\"text\"\n                  className=\"post__edit__body\"\n                  rows=\"3\"\n                  required\n                  onChange={(e) => setNewText(e.target.value.trimLeft())}\n                />\n                <button\n                  type=\"submit\"\n                  className=\"post__save-btn\"\n                >\n                  Save changes\n                </button>\n                <Link\n                  to=\"/posts\"\n                  className=\"post__delete-btn\"\n                  onClick={() => deleteHandler(postId)}\n                >\n                  Delete post\n                </Link>\n              </form>\n              \n            </div>\n          </div>\n        </>\n      )}\n      </section>\n  )\n}\n","import React from 'react';\n\nimport './User.scss';\nexport const User = ({ user }) => {\n\n  return (\n    <>\n      <tr className=\"users__table__row\">\n        <td className=\"users__table_row-element\">{user.name}</td>\n        <td className=\"users__table_row-element\">{user.username}</td>\n        <td className=\"users__table_row-element\">{user.email}</td>\n      </tr>\n    </>\n  )\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { loadUsersThunk } from '../../redux/actions/usersActions';\nimport { selectors } from '../../redux/reducers/rootReducer';\nimport { Loader } from '../Loader/Loader';\nimport { User } from '../User/User';\n\nexport const Users = () => {\n  const users = useSelector(selectors.getUsers);\n  const loading = useSelector(selectors.getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadUsersThunk());\n  }, [dispatch])\n\n  return (\n    <section className=\"users-page\">\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <table className=\"users__table\">\n            <thead className=\"users__table_head\">\n              <tr className=\"users__table_head-row users__table__row\">\n                <th className=\"users__table_head-element users__table_head-element_left-radius\">Name</th>\n                <th className=\"users__table_head-element\">Nickname</th>\n                <th className=\"users__table_head-element users__table_head-element_right-radius\">Email</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.map(user => {\n                return <User user={user} key={user.id} />\n              })}\n            </tbody>\n          </table>\n          <Link to=\"/posts\" className='users-page__posts-btn'>Posts</Link>\n        </>\n      )}\n    </section>\n  )\n}","import { Route, Switch, Redirect } from 'react-router-dom';\n\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { Users } from './components/UsersList/UsersList';\nimport './App.scss';\n\nfunction App() {\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/posts/\" component={PostsList} exact/>\n        <Route path=\"/posts/:postId\" component={PostDetails} exact/>\n        <Route path=\"/\" component={Users} exact />\n\n        <Redirect to=\"/\" />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './index.css';\nimport { store } from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}